<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on MongoDB Node.js Driver</title>
    <link>/node-mongodb-native/2.2/tutorials/</link>
    <description>Recent content in Tutorials on MongoDB Node.js Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Jun 2016 12:53:30 -0400</lastBuildDate>
    
	<atom:link href="/node-mongodb-native/2.2/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Projections</title>
      <link>/node-mongodb-native/2.2/tutorials/projections/</link>
      <pubDate>Wed, 01 Jun 2016 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/projections/</guid>
      <description>Projections By default, queries in MongoDB return all fields in matching documents. To limit the amount of data that MongoDB sends to applications, you can include a projection document in the query operation.
Projection Document The projection document limits the fields to return for all matching documents. The projection document can specify the inclusion of fields or the exclusion of field and has the following form:
{ field1: &amp;lt;value&amp;gt;, field2: &amp;lt;value&amp;gt; .</description>
    </item>
    
    <item>
      <title>GridFS API</title>
      <link>/node-mongodb-native/2.2/tutorials/gridfs/streaming/</link>
      <pubDate>Thu, 15 Oct 2015 14:27:51 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/gridfs/streaming/</guid>
      <description>The GridFS API The MongoDB Node.js driver now supports a stream-based API for GridFS that&amp;rsquo;s compatible with Node.js&amp;rsquo; streams3, so you can .pipe() directly from file streams to MongoDB. In this tutorial, you&amp;rsquo;ll see how to use the new GridFS streaming API to upload a CC-licensed 28 MB recording of the overture from Richard Wagner&amp;rsquo;s opera Die Meistersinger von Nurnberg to MongoDB using streams.
Getting Set Up The new GridFS streaming functionality is part of the 2.</description>
    </item>
    
    <item>
      <title>GridFS</title>
      <link>/node-mongodb-native/2.2/tutorials/gridfs/</link>
      <pubDate>Wed, 05 Aug 2015 12:00:00 +0000</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/gridfs/</guid>
      <description>GridFS GridFS is a specification for storing and retrieving files that exceed the BSON-document size limit of 16 megabytes.
Instead of storing a file in a single document, GridFS divides a file into parts, or chunks, and stores each of those chunks as a separate document. By default, GridFS limits chunk size to 255 kilobytes. GridFS uses two collections to store files: the chunks collection which stores the file chunks, and the files collection that stores the file metadata.</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>/node-mongodb-native/2.2/tutorials/connect/authenticating/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/connect/authenticating/</guid>
      <description>Authentication The Node.js driver supports all MongoDB authentication mechanisms, including those only available in the MongoDB Enterprise Edition.
DEFAULT Note Starting in MongoDB 3.0, MongoDB changed the default authentication mechanism from MONGODB-CR to SCRAM-SHA-1.
 To use the default mechanism, either omit the authentication mechanism specification or specify DEFAULT as the mechanism in the URI ConnectionString. The driver will attempt to authenticate using the SCRAM-SHA-1 authentication method if it is available on the MongoDB server.</description>
    </item>
    
    <item>
      <title>Collections</title>
      <link>/node-mongodb-native/2.2/tutorials/collections/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/collections/</guid>
      <description>Collections MongoDB stores documents in collections. If a collection does not exist, MongoDB creates the collection when you first store data for that collection.
You can also explicitly create a collection with various options, such as setting the maximum size or the documentation validation rules.
Capped Collection Capped collections have maximum size or document counts that prevent them from growing beyond maximum thresholds. All capped collections must specify a maximum size and may also specify a maximum document count.</description>
    </item>
    
    <item>
      <title>Database Commands</title>
      <link>/node-mongodb-native/2.2/tutorials/commands/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/commands/</guid>
      <description>Database Commands Database commands allow you to perform a wide range of diagnostic and administrative tasks with the Node.js driver. For example, the dbStats command returns storage statistics for a given database. Use the command function to access database commands.
// set up a command function var getDbStats = function(db, callback) { db.command({&#39;dbStats&#39;: 1}, function(err, results) { console.log(results); callback(); } ); }; // use the function var MongoClient = require(&#39;mongodb&#39;).</description>
    </item>
    
    <item>
      <title>Geospatial Search</title>
      <link>/node-mongodb-native/2.2/tutorials/geospatial-search/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/geospatial-search/</guid>
      <description>Geospatial Search You can query against geospatial indexes in several ways via the Node.js driver, using geospatial query operators.
To create a 2dsphere index on a collection, pass a document containing the name of the field to be indexed with the value &amp;lsquo;2dsphere&amp;rsquo; to the createIndex() method.
var create2dSphereIndex = function(db, callback) { // Get the restaurants collection var collection = db.collection(&#39;restaurants&#39;); // Create the index collection.createIndex( { &#39;address.coord&#39; : &amp;quot;2dsphere&amp;quot; }, function(err, result) { console.</description>
    </item>
    
    <item>
      <title>Legacy GridStore</title>
      <link>/node-mongodb-native/2.2/tutorials/gridfs/gridstore/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/gridfs/gridstore/</guid>
      <description>Note The GridStore API is deprecated. Driver version 2.0 and later uses the GridFS API.
 GridStore GridStore is a single file inside GridFS that can be managed by the script.
Open a GridFS file Opening a GridStore is similar to opening a database. First you create a GridStore object, then open it.
var gs = new GridStore(db, filename, mode[, options])  Where:
 db is the database object filename is the name of the file in GridFS that needs to be accessed/created mode indicates the operation, can be one of:  &amp;ldquo;r&amp;rdquo; (Read): Looks for the file information in fs.</description>
    </item>
    
    <item>
      <title>Text Search</title>
      <link>/node-mongodb-native/2.2/tutorials/text-search/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/text-search/</guid>
      <description>Text Search Use the $text operator to perform text searches on fields which have a text index.
To create a text index on a collection, pass a document containing the name of the field to be indexed with the value &amp;lsquo;text&amp;rsquo; to the createIndex() method.
var createTextIndex = function(db, callback) { // Get the restaurants collection var collection = db.collection(&#39;restaurants&#39;); // Create the index collection.createIndex( { name : &amp;quot;text&amp;quot; }, function(err, result) { console.</description>
    </item>
    
    <item>
      <title>CRUD Operations</title>
      <link>/node-mongodb-native/2.2/tutorials/crud/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/crud/</guid>
      <description>CRUD Operations For a walkthrough of the main CRUD operations please refer to the Quick Start guide.
Driver CRUD operations are defined as the operations performed to create, read, update, and delete documents. This tutorial covers both the basic CRUD methods and the specialized findAndModify based methods as well as the new Bulk API methods for efficient bulk write operations.
 Write Methods Write methods are divided into those which insert documents into a collection, those which update documents in a collection, and those which remove documents from a collection.</description>
    </item>
    
    <item>
      <title>Collations</title>
      <link>/node-mongodb-native/2.2/tutorials/collations/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/collations/</guid>
      <description>Overview Collations provide a set of rules which comply with the conventions of a particular language when comparing strings.
For example, in Canadian French, the last accent in a given word determines the sorting order.
Consider the following French words:
cote &amp;lt; coté &amp;lt; côte &amp;lt; côté  The sort order using the Canadian French collation would result in the following:
cote &amp;lt; côte &amp;lt; coté &amp;lt; côté  If collation is unspecified, MongoDB uses the simple binary comparison for strings.</description>
    </item>
    
    <item>
      <title>Connect to MongoDB</title>
      <link>/node-mongodb-native/2.2/tutorials/connect/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/connect/</guid>
      <description>Connect to MongoDB Note This reference applies to 2.1.11 or higher. For 2.1.10 or earlier, refer to the legacy connection settings. 2.1.11 is backward compatible with the legacy settings as well as the simplified settings.
 Use the MongoClient.connect method to connect to a running MongoDB deployment.
Connect to a Single MongoDB Instance To connect to a single MongoDB instance, specify the URI of the MongoDB instance to connect to.</description>
    </item>
    
    <item>
      <title>SSL Settings</title>
      <link>/node-mongodb-native/2.2/tutorials/connect/ssl/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:26 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/connect/ssl/</guid>
      <description>TLS/SSL The Node.js driver supports TLS/SSL connections to MongoDB that support TLS/SSL support.
No Certificate Validation If the MongoDB instance does not perform any validation of the certificate chain, include the ssl=true in the URI Connection String .
var MongoClient = require(&#39;mongodb&#39;).MongoClient; MongoClient.connect(&amp;quot;mongodb://localhost:27017/test?ssl=true&amp;quot;, function(err, db) { db.close(); });  Validate Server Certificate If the MongoDB instance presents a certificate, to validate the server&amp;rsquo;s certificate, pass to the MongoClient.connect method:</description>
    </item>
    
    <item>
      <title>Aggregation</title>
      <link>/node-mongodb-native/2.2/tutorials/aggregation/</link>
      <pubDate>Wed, 18 Mar 2015 21:14:20 -0400</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/aggregation/</guid>
      <description>Aggregation Overview Aggregation operations process data records and return computed results. Aggregation operations group values from multiple documents together, and can perform a variety of operations on the grouped data to return a single result.
The Aggregation Pipeline The aggregation pipeline is a framework for data aggregation modeled on the concept of data processing pipelines. Documents enter a multi-stage pipeline that transforms the documents into aggregated results.
For a full explanation and a complete list of pipeline stages and operators, see the manual:</description>
    </item>
    
    <item>
      <title>Create Indexes</title>
      <link>/node-mongodb-native/2.2/tutorials/create-indexes/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/create-indexes/</guid>
      <description>Create Indexes To create an index on a field or fields, pass an index specification document to the createIndex() method:
{ &amp;lt;field1&amp;gt;: &amp;lt;type1&amp;gt;, &amp;lt;field2&amp;gt;: &amp;lt;type2&amp;gt; ... }  Create an Ascending Index For an ascending index type, specify 1 for &amp;lt;type&amp;gt;.
The following example creates an ascending index key for the dateOfBirth field:
var createAscendingIndex = function(db, callback) { // Get the users collection var collection = db.collection(&#39;users&#39;); // Create the index collection.</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>/node-mongodb-native/2.2/tutorials/main/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/node-mongodb-native/2.2/tutorials/main/</guid>
      <description>Tutorials The tutorials in this section provide examples of some frequently used operations. This section is not meant to be an exhaustive list of all operations available in the Node.js driver.
Connect to MongoDB
Collections
Create Indexes
CRUD Operations
Collations
Projections
Aggregation
Text Search
Geospatial Search
Database Commands
GridFS</description>
    </item>
    
  </channel>
</rss>