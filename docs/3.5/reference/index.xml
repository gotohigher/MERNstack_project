<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>References on MongoDB Node.js Driver</title>
    <link>/node-mongodb-native/3.5/reference/</link>
    <description>Recent content in References on MongoDB Node.js Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Jan 2020 09:03:26 -0400</lastBuildDate>
    
	<atom:link href="/node-mongodb-native/3.5/reference/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Connection Pool Monitoring</title>
      <link>/node-mongodb-native/3.5/reference/management/cmap-monitoring/</link>
      <pubDate>Tue, 14 Jan 2020 09:03:26 -0400</pubDate>
      
      <guid>/node-mongodb-native/3.5/reference/management/cmap-monitoring/</guid>
      <description>Connection Pool Monitoring The Node.js driver 3.5.0 or higher features Connection Pool Monitoring events, allowing an application or tool to monitor the internal workings of the driver&amp;rsquo;s connection pool.
NOTE: Connection pool monitoring is only available when the &amp;ldquo;Unified Topology&amp;rdquo; is enabled
Overview of CMAP events    Event Description     connectionPoolCreated Emitted when a connection pool is created   connectionPoolClosed Emitted when a connection pool is closed, prior to server instance destruction   connectionCreated Emitted when a connection is created, but not necessarily when it is used for an operation   connectionReady Emitted after a connection has successfully completed a handshake, and is ready to be used for operations   connectionClosed Emitted when a connection is closed   connectionCheckOutStarted Emitted when an operation attempts to acquire a connection for execution   connectionCheckOutFailed Emitted when an operation fails to acquire a connection for execution   connectionCheckedOut Emitted when an operation successfully acquires a connection for execution   connectionCheckedIn Emitted when a connection is returned to the pool after operation execution   connectionPoolCleared Emitted when the connection pool&amp;rsquo;s generation count is increased    Simple Code Example The following example demonstrates connecting to a replica set and printing out all CMAP related events:</description>
    </item>
    
    <item>
      <title>Unified Topology Design</title>
      <link>/node-mongodb-native/3.5/reference/unified-topology/</link>
      <pubDate>Thu, 04 Jul 2019 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/3.5/reference/unified-topology/</guid>
      <description>Unified Topology Design At the time of writing the node driver has seven topology classes, including the newly introduced unified topology. Each legacy topology type from the core module targets a supported topology class: Replica Sets, Sharded Deployments (mongos) and Standalone servers. On top of each of these rests a thin topology wrapper from the &amp;ldquo;native&amp;rdquo; layer which introduces the concept of a &amp;ldquo;disconnect handler&amp;rdquo;, essentially a callback queue for handling naive retryability.</description>
    </item>
    
    <item>
      <title>Client Side Encryption</title>
      <link>/node-mongodb-native/3.5/reference/client-side-encryption/</link>
      <pubDate>Thu, 13 Jun 2019 09:00:01 +0100</pubDate>
      
      <guid>/node-mongodb-native/3.5/reference/client-side-encryption/</guid>
      <description>Client Side Encryption New in MongoDB 4.2 client side encryption allows administrators and developers to encrypt specific data fields in addition to other MongoDB encryption features.
With field level encryption, developers can encrypt fields client side without any server-side configuration or directives. Client-side field level encryption supports workloads where applications must guarantee that unauthorized parties, including server administrators, cannot read the encrypted data.
Installation Using client side encryption requires installing themongodb-client-encryption package:</description>
    </item>
    
    <item>
      <title>Management</title>
      <link>/node-mongodb-native/3.5/reference/management/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/node-mongodb-native/3.5/reference/management/</guid>
      <description> Management The driver provides two mechanisms for examining its state:
 Logging: Comprehensive logging of all operations. Application Performance Monitoring: The Application Performance Monitoring API is an API that allows developers to tap into the commands issued to MongoDB to record performance metrics and/or inspect the commands sent to MongoDB.  </description>
    </item>
    
    <item>
      <title>CRUD Operations</title>
      <link>/node-mongodb-native/3.5/reference/ecmascriptnext/crud/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/3.5/reference/ecmascriptnext/crud/</guid>
      <description>ECMAScript Next CRUD Let&amp;rsquo;s take a look at the CRUD operations from the perspective of ESNext. In this guide we will be using the same examples as in the general CRUD specification overview but rewrite them to use the new ESNext features. For all method options refer to the main CRUD tutorial.
 CRUD: CRUD Specification.  This reference also omits methods that no longer make sense when using ESNext such as the each and forEach methods.</description>
    </item>
    
    <item>
      <title>Connecting</title>
      <link>/node-mongodb-native/3.5/reference/ecmascriptnext/connecting/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/3.5/reference/ecmascriptnext/connecting/</guid>
      <description>Connecting The MongoClient connection method returns a Promise if no callback is passed to it. Below is an example using the async/await commands.
const MongoClient = require(&#39;mongodb&#39;).MongoClient; const assert = require(&#39;assert&#39;); (async function() { // Connection URL const url = &#39;mongodb://localhost:27017/myproject&#39;; // Database Name const dbName = &#39;myproject&#39;; const client = new MongoClient(url, { useNewUrlParser: true }); try { // Use connect method to connect to the Server await client.</description>
    </item>
    
    <item>
      <title>Connection Options</title>
      <link>/node-mongodb-native/3.5/reference/connecting/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/3.5/reference/connecting/</guid>
      <description> Connection Options For more information on the connection options:
 URI Connection String: MongoDB connection string URI. Connection Settings: Reference on the driver-specific connection settings.  </description>
    </item>
    
    <item>
      <title>Connection Settings</title>
      <link>/node-mongodb-native/3.5/reference/connecting/connection-settings/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/3.5/reference/connecting/connection-settings/</guid>
      <description>URI Connection Settings Optional connection settings are settings not covered by the URI Connection String . The following options are passed in the options parameter when you create a mongo client.
const MongoClient = require(&#39;mongodb&#39;).MongoClient; const assert = require(&#39;assert&#39;); // Connection URL const url = &#39;mongodb://localhost:50000,localhost:50001&#39;; // Database Name const dbName = &#39;myproject&#39;; // create a client, passing in additional options const client = new MongoClient(url, { poolSize: 10, tls: true }); // Use connect method to connect to the server client.</description>
    </item>
    
    <item>
      <title>Cursors</title>
      <link>/node-mongodb-native/3.5/reference/cursors/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/3.5/reference/cursors/</guid>
      <description>Cursors When a driver executes a read that returns mutliple documents, the server does not immediately return all values that match the query. Instead, the driver creates a Cursor object which fetches the documents in batches.
Where are cursors used in the driver? The following functions directly return cursors to the user:
 Collection.prototype.find Collection.prototype.aggregate Collection.prototype.listIndexes Db.prototype.aggregate Db.prototype.listCollections  In addition, many other methods, like Collection.prototype.findOne and Collection.prototype.watch, use cursors in order to return results.</description>
    </item>
    
    <item>
      <title>ECMAScript Next</title>
      <link>/node-mongodb-native/3.5/reference/ecmascriptnext/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/3.5/reference/ecmascriptnext/</guid>
      <description>ECMAScript Next ECMAScript Next (also know as ESNext, ES2015, ES6, and many other names) is the new future of the Javascript language. It introduces fundamental changes in JavaScript while maintaining backward compatibility with ECMAScript 5.
The MongoDB Node.js driver embraces modern JavaScript by optionally returning Promises from all async methods.
This section exposes how to use the MongoDB Node.js driver with ESNext, leveraging all the productivity gains you get from the new Javascript.</description>
    </item>
    
    <item>
      <title>Frequently Asked Questions</title>
      <link>/node-mongodb-native/3.5/reference/faq/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/3.5/reference/faq/</guid>
      <description>What is the difference between connectTimeoutMS, socketTimeoutMS and maxTimeMS ?    Setting Default Value client.connect Description     connectTimeoutMS 30000 The connectTimeoutMS sets the number of milliseconds a socket stays inactive before closing during the connection phase of the driver. That is to say, when the application initiates a connection, when a replica set connects to new members, or when a replica set reconnects to members.</description>
    </item>
    
    <item>
      <title>Pool Design</title>
      <link>/node-mongodb-native/3.5/reference/pool/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/3.5/reference/pool/</guid>
      <description>Driver Pool Design The 2.0 series of the mongodb-core module introduced a newly re-designed pool that will grow and contract based on the usage pattern. This reference outlines how the growing/shrinking of the pool works, how authentication is handled and how operations are executed.
Operations are executed using a work-queue. That means the Pool is responsible for scheduling the execution of operations on connections. The benefit of this is that one avoids slow operations holding up fast operations as long as the following holds true.</description>
    </item>
    
    <item>
      <title>APM</title>
      <link>/node-mongodb-native/3.5/reference/management/apm/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:26 -0400</pubDate>
      
      <guid>/node-mongodb-native/3.5/reference/management/apm/</guid>
      <description>APM Application Performance Monitoring support is a driver feature that allows monitoring services to hook into the driver in a forward compatible and stable way. The API is not applied to the driver unless explicitly initialized to avoid any performance penalties.
API The following code example hooks into all the available features of the APM API.
const listener = require(&#39;mongodb&#39;).instrument({ operationIdGenerator: { operationId: 1, next: function() { return this.operationId++; } }, timestampGenerator: { current: function() { return new Date().</description>
    </item>
    
    <item>
      <title>Topology Monitoring</title>
      <link>/node-mongodb-native/3.5/reference/management/sdam-monitoring/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:26 -0400</pubDate>
      
      <guid>/node-mongodb-native/3.5/reference/management/sdam-monitoring/</guid>
      <description>Topology Management The Node.js driver 2.1.10 or higher features SDAM Monitoring events, allowing an application or tool to monitor changes in the drivers view of a single server, replica set or mongos. This allows an application to react to changes of topology, such as a secondary joining or leaving a replica set.
Overview of SDAM events    Event Applies To Description     serverOpening Server, Replicaset, Mongos Emitted when server connection is established.</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>/node-mongodb-native/3.5/reference/management/logging/</link>
      <pubDate>Wed, 18 Mar 2015 21:14:20 -0400</pubDate>
      
      <guid>/node-mongodb-native/3.5/reference/management/logging/</guid>
      <description>Logging You can change the log level, filter on classes to allow only specific classes to log, and provide your own logger implementation.
Setting Log level The driver allows logging at three different levels: debug, info and error. The default level is error. The following example demonstrates how to set the logger to debug.
const MongoClient = require(&#39;mongodb&#39;).MongoClient; const Logger = require(&#39;mongodb&#39;).Logger; const assert = require(&#39;assert&#39;); // Connection URL const url = &#39;mongodb://localhost:27017&#39;; // Database Name const dbName = &#39;myprojeect&#39;; const client = new MongoClient(url); // Use connect method to connect to the server client.</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/node-mongodb-native/3.5/reference/main/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/node-mongodb-native/3.5/reference/main/</guid>
      <description> Reference The reference documentation for the Node.js driver driver focuses on high-level documentation and use-cases.
 Connect to MongoDB: Documentation of the driver&amp;rsquo;s support for connecting to MongoDB servers ECMAScript Next: Using the driver with ESNext. Management: Documentation of the driver&amp;rsquo;s support for logging and monitoring of its internal state  </description>
    </item>
    
  </channel>
</rss>