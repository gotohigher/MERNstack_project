<%
for(var i = 0; i < entries.length; i++) {
  if(isClass(entries[i].tags)) {
    %><%= format("==================\n%s\n==================\n", entries[i].ctx.string) %><%
    %><%- format("%s", entries[i].description.full.replace(/<[^>]+>/g, '')) %><%
  }
}
%>

<% 
for(var i = 0; i < entries.length; i++) {
  if(isClass(entries[i].tags)) {
    %><%= format(".. js:class:: %s\n\n", entries[i].ctx.string) %><%

    for(var ti = 0; ti < entries[i].tags.length; ti++) { 
      // Get the current tag
      var tag = entries[i].tags[ti];    
      // If we have a parameter render it
      if(tag.type == 'param') {
        // Unpack the tag
        var type = tag.types[0].toLowerCase();
        var name = tag.name;
        var description = tag.description;
        // Render the parameter
        %><%= format("   :param %s %s: %s\n", type, name, description) %><%
      } else if(tag.type == 'return') {
        // Unpack the tag
        var type = tag.types[0].toLowerCase();
        var description = tag.description;
        // Render the parameter
        %><%= format("   :returns: %s %s\n", type, description) %><%        
      }
    }
  }
}
%>

------------------
Class methods
------------------

<% 
for(var i = 0; i < entries.length; i++) {
  if(isFunction(entries[i])) {
    var paramsStrings = [];
    var paramNames = [];
        
    for(var ti = 0; ti < entries[i].tags.length; ti++) { 
      // Get the current tag
      var tag = entries[i].tags[ti];    
      // If we have a parameter render it
      if(tag.type == 'param') {
        // Unpack the tag
        var type = tag.types[0].toLowerCase();
        var name = tag.name;
        var description = tag.description;
        // Add to list of params
        paramNames.push(name);
        // Render the parameter
        paramsStrings.push(format("   :param %s %s: %s\n", type, name, description));
      } else if(tag.type == 'return') {
        // Unpack the tag
        var type = tag.types[0].toLowerCase();
        var description = tag.description;
        // Render the parameter
        paramsStrings.push(format("   :returns: %s %s\n\n", type, description));
      }
    }
    
    // Reformat any optional parameters from ,[] to [,]
    var paramsString = paramNames.join(", ").replace(/\, \[/, "[, ");
    // Write out the methods
    %><%= format(".. js:function:: %s(%s)\n\n", entries[i].ctx.name, paramsString) %><%
    %><%= paramsStrings.join("") %><%
  }
}
%>
